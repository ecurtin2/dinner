# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: recipe.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List, Optional

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


class PostRecipeResponseStatus(betterproto.Enum):
    SUCCESS = 0
    FAIL = 1


@dataclass(eq=False, repr=False)
class Ingredient(betterproto.Message):
    name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RecipeIngredient(betterproto.Message):
    name: str = betterproto.string_field(1)
    quantity: int = betterproto.int32_field(2)
    unit: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class Recipe(betterproto.Message):
    id: str = betterproto.string_field(1)
    title: str = betterproto.string_field(2)
    description: str = betterproto.string_field(3)
    instructions: str = betterproto.string_field(4)
    teaser_image: str = betterproto.string_field(5)
    ingredients: List["RecipeIngredient"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class RecipeList(betterproto.Message):
    recipes: List["Recipe"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RecipeQuery(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class PostRecipeResponse(betterproto.Message):
    status: "PostRecipeResponseStatus" = betterproto.enum_field(1)


class RecipeStoreStub(betterproto.ServiceStub):
    async def get_recipe(self, *, id: str = "") -> "Recipe":

        request = RecipeQuery()
        request.id = id

        return await self._unary_unary("/RecipeStore/GetRecipe", request, Recipe)

    async def query_recipes(self, *, id: str = "") -> "RecipeList":

        request = RecipeQuery()
        request.id = id

        return await self._unary_unary("/RecipeStore/QueryRecipes", request, RecipeList)

    async def post_recipe(
        self,
        *,
        id: str = "",
        title: str = "",
        description: str = "",
        instructions: str = "",
        teaser_image: str = "",
        ingredients: Optional[List["RecipeIngredient"]] = None,
    ) -> "PostRecipeResponse":
        ingredients = ingredients or []

        request = Recipe()
        request.id = id
        request.title = title
        request.description = description
        request.instructions = instructions
        request.teaser_image = teaser_image
        if ingredients is not None:
            request.ingredients = ingredients

        return await self._unary_unary(
            "/RecipeStore/PostRecipe", request, PostRecipeResponse
        )


class RecipeStoreBase(ServiceBase):
    async def get_recipe(self, id: str) -> "Recipe":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_recipes(self, id: str) -> "RecipeList":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_recipe(
        self,
        id: str,
        title: str,
        description: str,
        instructions: str,
        teaser_image: str,
        ingredients: Optional[List["RecipeIngredient"]],
    ) -> "PostRecipeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_recipe(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        response = await self.get_recipe(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_query_recipes(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        response = await self.query_recipes(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_post_recipe(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
            "title": request.title,
            "description": request.description,
            "instructions": request.instructions,
            "teaser_image": request.teaser_image,
            "ingredients": request.ingredients,
        }

        response = await self.post_recipe(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/RecipeStore/GetRecipe": grpclib.const.Handler(
                self.__rpc_get_recipe,
                grpclib.const.Cardinality.UNARY_UNARY,
                RecipeQuery,
                Recipe,
            ),
            "/RecipeStore/QueryRecipes": grpclib.const.Handler(
                self.__rpc_query_recipes,
                grpclib.const.Cardinality.UNARY_UNARY,
                RecipeQuery,
                RecipeList,
            ),
            "/RecipeStore/PostRecipe": grpclib.const.Handler(
                self.__rpc_post_recipe,
                grpclib.const.Cardinality.UNARY_UNARY,
                Recipe,
                PostRecipeResponse,
            ),
        }
